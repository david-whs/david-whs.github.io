import '../dist/pixi.min.js';import{MODES,RIGHTCLICK}from './constants.js';import{Flownetwork}from './flownetwork.js';export class Pixi{constructor(){this.app=new PIXI.Application({width:1000,height:500,background:0x191919});this.from=null;this.to=null;this.currentMode=MODES.ADD_NODE;this.network=new Flownetwork();this.app.view.addEventListener("click",(event)=>{if(this.currentMode===MODES.ADD_NODE){this.clear();const vertex=this.network.addVertex(this.getRelativeMousePosition(event));this.render();document.getElementById("maxPossibleFlow").innerText="0";vertex.shape.on("click",(event)=>{if(event.button===RIGHTCLICK){this.clear();this.network.deleteVertex(vertex.id);this.render()}else if(this.currentMode==MODES.ADD_EDGE){this.clear();const edge=this.addEdge(vertex);if(edge){if(this.network.isLastVertex(edge.to)){let maxPossibleFlow=Number.parseInt(document.getElementById("maxPossibleFlow").innerText);maxPossibleFlow+=Number.parseInt(edge.capacity);document.getElementById("maxPossibleFlow").innerText=maxPossibleFlow}edge.labelBackground.on("click",(event)=>{if(event.button===RIGHTCLICK){this.clear();edge.from.edges=edge.from.edges.filter((fromEdge)=>fromEdge!==edge);if(this.network.isLastVertex(edge.to)){let maxPossibleFlow=Number.parseInt(document.getElementById("maxPossibleFlow").innerText);maxPossibleFlow-=Number.parseInt(edge.capacity);document.getElementById("maxPossibleFlow").innerText=maxPossibleFlow}this.render()}})}this.render()}})}})}addModeRadioButtons(){const style=getComputedStyle(document.body);const linkColor=style.getPropertyValue("--r-link-color");const backgroundColor=style.getPropertyValue("--r-background-color");const modeButtonsDiv=document.createElement("div");let addNodeSvgDoc;let addEdgeSvgDoc;(()=>{const addNodeButtonSVG=document.createElement("object");const addNodeButtonSVGWrapper=document.createElement("span");addNodeButtonSVG.setAttribute("data","../assets/add-node.svg");addNodeButtonSVG.addEventListener("load",()=>{addNodeSvgDoc=addNodeButtonSVG.contentDocument;const nodeSvgBackground=addNodeSvgDoc.getElementById("path2");nodeSvgBackground.setAttribute("stroke",linkColor);nodeSvgBackground.setAttribute("stroke-width",3)});addNodeButtonSVGWrapper.addEventListener("click",()=>{const nodeSvgBackground=addNodeSvgDoc.getElementById("path2");const edgeSvgBackground=addEdgeSvgDoc.getElementById("path13");if(this.currentMode===MODES.ADD_NODE){return}nodeSvgBackground.setAttribute("fill","#FFFFFF");nodeSvgBackground.setAttribute("stroke",linkColor);edgeSvgBackground.setAttribute("fill",backgroundColor);edgeSvgBackground.setAttribute("stroke",backgroundColor);this.currentMode=MODES.ADD_NODE});addNodeButtonSVGWrapper.appendChild(addNodeButtonSVG);modeButtonsDiv.appendChild(addNodeButtonSVGWrapper)})();(()=>{const addEdgeButtonSVG=document.createElement("object");const addEdgeButtonSVGWrapper=document.createElement("span");addEdgeButtonSVG.setAttribute("data","../assets/add-edge.svg");addEdgeButtonSVG.addEventListener("load",()=>{addEdgeSvgDoc=addEdgeButtonSVG.contentDocument;const edgeSvgBackground=addEdgeSvgDoc.getElementById("path13");edgeSvgBackground.setAttribute("fill",backgroundColor);edgeSvgBackground.setAttribute("stroke",backgroundColor);edgeSvgBackground.setAttribute("stroke-width",3)});addEdgeButtonSVGWrapper.addEventListener("click",()=>{const nodeSvgBackground=addNodeSvgDoc.getElementById("path2");const edgeSvgBackground=addEdgeSvgDoc.getElementById("path13");if(this.currentMode===MODES.ADD_EDGE){return}nodeSvgBackground.setAttribute("fill",backgroundColor);nodeSvgBackground.setAttribute("stroke",backgroundColor);edgeSvgBackground.setAttribute("fill","#FFFFFF");edgeSvgBackground.setAttribute("stroke",linkColor);this.currentMode=MODES.ADD_EDGE});addEdgeButtonSVGWrapper.appendChild(addEdgeButtonSVG);modeButtonsDiv.appendChild(addEdgeButtonSVGWrapper)})();(()=>{const startAlgorithmButtonSVG=document.createElement("object");const startAlgorithmSVGWrapper=document.createElement("span");let icon;startAlgorithmButtonSVG.setAttribute("data","../assets/start.svg");startAlgorithmButtonSVG.addEventListener("load",()=>{icon=startAlgorithmButtonSVG.contentDocument.getElementById("path9")});startAlgorithmSVGWrapper.addEventListener("click",async()=>{icon.setAttribute("fill","#00FF00");await this.startAlgorithm();icon.setAttribute("fill",linkColor)});startAlgorithmSVGWrapper.appendChild(startAlgorithmButtonSVG);modeButtonsDiv.appendChild(startAlgorithmSVGWrapper)})();(()=>{const resetAlgorithmButtonSVG=document.createElement("object");const resetAlgorithmSVGWrapper=document.createElement("span");resetAlgorithmButtonSVG.setAttribute("data","../assets/reset.svg");resetAlgorithmSVGWrapper.addEventListener("click",()=>{this.resetAlgorithm()});resetAlgorithmSVGWrapper.appendChild(resetAlgorithmButtonSVG);modeButtonsDiv.appendChild(resetAlgorithmSVGWrapper)})();(()=>{const deleteFlownetworkButtonSVG=document.createElement("object");const deleteFlownetworkSVGWrapper=document.createElement("span");deleteFlownetworkButtonSVG.setAttribute("data","../assets/delete.svg");deleteFlownetworkSVGWrapper.addEventListener("click",()=>{this.clear();this.network=new Flownetwork();document.getElementById("totalFlow").innerText="0";document.getElementById("maxPossibleFlow").innerText="0";this.render()});deleteFlownetworkSVGWrapper.appendChild(deleteFlownetworkButtonSVG);modeButtonsDiv.appendChild(deleteFlownetworkSVGWrapper)})();return modeButtonsDiv}addEdge(selectedVertex){if(!this.from){this.from=selectedVertex;this.from.shape.alpha=0.8}else if(!this.to){this.to=selectedVertex;this.to.shape.alpha=0.8}if(this.from&&this.to){if(this.from===this.to){this.from=null;this.to=null;return}const edge=this.network.addEdge(this.from,this.to);this.from.shape.alpha=1;this.to.shape.alpha=1;this.from=null;this.to=null;return edge}return null}render(){this.network.vertices.forEach((vertex)=>{vertex.edges.forEach((edge)=>{this.app.stage.addChild(edge.shape);this.app.stage.addChild(edge.labelBackground);this.app.stage.addChild(edge.label)});this.app.stage.addChild(vertex.shape);this.app.stage.addChild(vertex.label)})}clear(){this.network.vertices.forEach((vertex)=>{vertex.edges.forEach((edge)=>{this.app.stage.removeChild(edge.shape);this.app.stage.removeChild(edge.label);this.app.stage.removeChild(edge.labelBackground)});this.app.stage.removeChild(vertex.shape);this.app.stage.removeChild(vertex.label)})}getRelativeMousePosition(event){return{x:event.offsetX,y:event.offsetY}}async startAlgorithm(){const vertices=this.network.vertices;const edges=vertices.flatMap((vertex)=>vertex.edges);if(vertices.length<2){alert("Es werden mindestens zwei Knoten benötigt");return}if(edges.length<1){alert("Es wird mindestens eine Kante von der Quelle zum Ziel benötigt");return}this.network.source=vertices[0];this.network.target=vertices[vertices.length-1];let maxFlow=0;let path;while((path=this.network.getAugmentingPath()).length>0){let pathBottleneck=Number.MAX_VALUE;for(let i=0;i<path.length;i+=1){let edge=path[i];edge.shape.clear();edge.shape.lineStyle(4,0x00FF00,1);edge.shape.moveTo(edge.from.x,edge.from.y);edge.shape.lineTo(edge.to.x,edge.to.y);edge.shape.closePath();edge.shape.endFill();await new Promise(r=>setTimeout(r,1000));pathBottleneck=Math.min(pathBottleneck,edge.remainingCapacity())}for(let i=0;i<path.length;i+=1){let edge=path[i];edge.addFlow(pathBottleneck);const text=`${edge.flow }/${edge.capacity }`;edge.label.text=text;edge.labelBackground.clear();if(!edge.hasRemainingCapacity()){edge.labelBackground.beginFill(0xFF0000)}else{edge.labelBackground.beginFill(0x0c0c0c)}edge.labelBackground.drawRect(edge.label.x,edge.label.y,text.length*15,35);edge.labelBackground.endFill();await new Promise(r=>setTimeout(r,1000))}maxFlow+=pathBottleneck;document.getElementById("totalFlow").innerText=maxFlow;await new Promise(r=>setTimeout(r,1000));path.forEach((edge)=>{edge.shape.clear();edge.shape.lineStyle(4,0xFFFFFF,1);edge.shape.moveTo(edge.from.x,edge.from.y);edge.shape.lineTo(edge.to.x,edge.to.y);edge.shape.closePath();edge.shape.endFill()})}}resetAlgorithm(){document.getElementById("totalFlow").innerText="0";this.clear();this.network.vertices.forEach((vertex)=>{vertex.edges.forEach((edge)=>{edge.flow=0;const text=`${edge.flow }/${edge.capacity }`;edge.label.text=text;edge.shape.clear();edge.shape.lineStyle(4,0xFFFFFF,1);edge.shape.moveTo(edge.from.x,edge.from.y);edge.shape.lineTo(edge.to.x,edge.to.y);edge.shape.closePath();edge.shape.endFill();edge.labelBackground.clear();edge.labelBackground.beginFill(0x0c0c0c);edge.labelBackground.drawRect(edge.label.x,edge.label.y,text.length*15,35);edge.labelBackground.endFill()})});this.render()}}